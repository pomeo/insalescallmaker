{"version":3,"sources":["core/scrollspy.js"],"names":["UI","$win","$doc","scrollspies","checkScrollSpy","i","length","support","requestAnimationFrame","apply","window","check","component","defaults","target","cls","initcls","topoffset","leftoffset","repeat","delay","boot","on","Utils","debounce","ready","context","$","each","element","this","data","scrollspy","options","attr","init","initinview","$this","togglecls","split","fn","elements","find","delayIdx","toggleclsIdx","inviewstate","inview","isInView","toggle","trim","addClass","offset","trigger","setTimeout","toggleClass","width","clearTimeout","removeClass","push","scrollspynavs","checkScrollSpyNavs","closest","smoothscroll","scrollspynav","inviews","ids","links","targets","join","clsActive","clsClosest","eq","navitems","scrollTop","top","filter","smoothScroll","UIkit"],"mappings":"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","file":"core/scrollspy.js","sourcesContent":["/*! UIkit 2.17.0 | http://www.getuikit.com | (c) 2014 YOOtheme | MIT License */\n(function(UI) {\n\n    \"use strict\";\n\n    var $win           = UI.$win,\n        $doc           = UI.$doc,\n        scrollspies    = [],\n        checkScrollSpy = function() {\n            for(var i=0; i < scrollspies.length; i++) {\n                UI.support.requestAnimationFrame.apply(window, [scrollspies[i].check]);\n            }\n        };\n\n    UI.component('scrollspy', {\n\n        defaults: {\n            \"target\"     : false,\n            \"cls\"        : \"uk-scrollspy-inview\",\n            \"initcls\"    : \"uk-scrollspy-init-inview\",\n            \"topoffset\"  : 0,\n            \"leftoffset\" : 0,\n            \"repeat\"     : false,\n            \"delay\"      : 0\n        },\n\n        boot: function() {\n\n            // listen to scroll and resize\n            $doc.on(\"scrolling.uk.document\", checkScrollSpy);\n            $win.on(\"load resize orientationchange\", UI.Utils.debounce(checkScrollSpy, 50));\n\n            // init code\n            UI.ready(function(context) {\n\n                UI.$(\"[data-uk-scrollspy]\", context).each(function() {\n\n                    var element = UI.$(this);\n\n                    if (!element.data(\"scrollspy\")) {\n                        var obj = UI.scrollspy(element, UI.Utils.options(element.attr(\"data-uk-scrollspy\")));\n                    }\n                });\n            });\n        },\n\n        init: function() {\n\n            var $this = this, inviewstate, initinview, togglecls = this.options.cls.split(/,/), fn = function(){\n\n                var elements     = $this.options.target ? $this.element.find($this.options.target) : $this.element,\n                    delayIdx     = elements.length === 1 ? 1 : 0,\n                    toggleclsIdx = 0;\n\n                elements.each(function(idx){\n\n                    var element     = UI.$(this),\n                        inviewstate = element.data('inviewstate'),\n                        inview      = UI.Utils.isInView(element, $this.options),\n                        toggle      = element.data('ukScrollspyCls') || togglecls[toggleclsIdx].trim();\n\n                    if (inview && !inviewstate && !element.data('scrollspy-idle')) {\n\n                        if (!initinview) {\n                            element.addClass($this.options.initcls);\n                            $this.offset = element.offset();\n                            initinview = true;\n\n                            element.trigger(\"init.uk.scrollspy\");\n                        }\n\n                        element.data('scrollspy-idle', setTimeout(function(){\n\n                            element.addClass(\"uk-scrollspy-inview\").toggleClass(toggle).width();\n                            element.trigger(\"inview.uk.scrollspy\");\n\n                            element.data('scrollspy-idle', false);\n                            element.data('inviewstate', true);\n\n                        }, $this.options.delay * delayIdx));\n\n                        delayIdx++;\n                    }\n\n                    if (!inview && inviewstate && $this.options.repeat) {\n\n                        if (element.data('scrollspy-idle')) {\n                            clearTimeout(element.data('scrollspy-idle'));\n                        }\n\n                        element.removeClass(\"uk-scrollspy-inview\").toggleClass(toggle);\n                        element.data('inviewstate', false);\n\n                        element.trigger(\"outview.uk.scrollspy\");\n                    }\n\n                    toggleclsIdx = togglecls[toggleclsIdx + 1] ? (toggleclsIdx + 1) : 0;\n\n                });\n            };\n\n            fn();\n\n            this.check = fn;\n\n            scrollspies.push(this);\n        }\n    });\n\n\n    var scrollspynavs = [],\n        checkScrollSpyNavs = function() {\n            for(var i=0; i < scrollspynavs.length; i++) {\n                UI.support.requestAnimationFrame.apply(window, [scrollspynavs[i].check]);\n            }\n        };\n\n    UI.component('scrollspynav', {\n\n        defaults: {\n            \"cls\"          : 'uk-active',\n            \"closest\"      : false,\n            \"topoffset\"    : 0,\n            \"leftoffset\"   : 0,\n            \"smoothscroll\" : false\n        },\n\n        boot: function() {\n\n            // listen to scroll and resize\n            $doc.on(\"scrolling.uk.document\", checkScrollSpyNavs);\n            $win.on(\"resize orientationchange\", UI.Utils.debounce(checkScrollSpyNavs, 50));\n\n            // init code\n            UI.ready(function(context) {\n\n                UI.$(\"[data-uk-scrollspy-nav]\", context).each(function() {\n\n                    var element = UI.$(this);\n\n                    if (!element.data(\"scrollspynav\")) {\n                        var obj = UI.scrollspynav(element, UI.Utils.options(element.attr(\"data-uk-scrollspy-nav\")));\n                    }\n                });\n            });\n        },\n\n        init: function() {\n\n            var ids     = [],\n                links   = this.find(\"a[href^='#']\").each(function(){ ids.push(UI.$(this).attr(\"href\")); }),\n                targets = UI.$(ids.join(\",\")),\n\n                clsActive  = this.options.cls,\n                clsClosest = this.options.closest || this.options.closest;\n\n            var $this = this, inviews, fn = function(){\n\n                inviews = [];\n\n                for (var i=0 ; i < targets.length ; i++) {\n                    if (UI.Utils.isInView(targets.eq(i), $this.options)) {\n                        inviews.push(targets.eq(i));\n                    }\n                }\n\n                if (inviews.length) {\n\n                    var navitems,\n                        scrollTop = $win.scrollTop(),\n                        target = (function(){\n                            for(var i=0; i< inviews.length;i++){\n                                if(inviews[i].offset().top >= scrollTop){\n                                    return inviews[i];\n                                }\n                            }\n                        })();\n\n                    if (!target) return;\n\n                    if ($this.options.closest) {\n                        links.closest(clsClosest).removeClass(clsActive);\n                        navitems = links.filter(\"a[href='#\"+target.attr(\"id\")+\"']\").closest(clsClosest).addClass(clsActive);\n                    } else {\n                        navitems = links.removeClass(clsActive).filter(\"a[href='#\"+target.attr(\"id\")+\"']\").addClass(clsActive);\n                    }\n\n                    $this.element.trigger(\"inview.uk.scrollspynav\", [target, navitems]);\n                }\n            };\n\n            if (this.options.smoothscroll && UI.smoothScroll) {\n                links.each(function(){\n                    UI.smoothScroll(this, $this.options.smoothscroll);\n                });\n            }\n\n            fn();\n\n            this.element.data(\"scrollspynav\", this);\n\n            this.check = fn;\n            scrollspynavs.push(this);\n\n        }\n    });\n\n})(UIkit);\n"],"sourceRoot":"/source/"}