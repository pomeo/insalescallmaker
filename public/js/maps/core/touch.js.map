{"version":3,"sources":["core/touch.js"],"names":["$","swipeDirection","x1","x2","y1","y2","Math","abs","longTap","longTapTimeout","touch","last","el","trigger","cancelLongTap","clearTimeout","cancelAll","touchTimeout","tapTimeout","swipeTimeout","isPrimaryTouch","event","pointerType","MSPOINTER_TYPE_TOUCH","isPrimary","fn","swipeLeft","gesture","longTapDelay","now","delta","firstTouch","deltaX","deltaY","window","MSGesture","target","document","body","on","e","swipeDirectionFromVelocity","originalEvent","velocityX","velocityY","type","touches","Date","parentNode","pageX","pageY","isDoubleTap","setTimeout","addPointer","pointerId","isNaN","Event","cancelTouch","forEach","eventName","callback","this","jQuery"],"mappings":"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","file":"core/touch.js","sourcesContent":["/*! UIkit 2.17.0 | http://www.getuikit.com | (c) 2014 YOOtheme | MIT License */\n//  Based on Zeptos touch.js\n//  https://raw.github.com/madrobby/zepto/master/src/touch.js\n//  Zepto.js may be freely distributed under the MIT license.\n\n;(function($){\n\n  if ($.fn.swipeLeft) {\n    return;\n  }\n\n\n  var touch = {}, touchTimeout, tapTimeout, swipeTimeout, longTapTimeout, longTapDelay = 750, gesture;\n\n  function swipeDirection(x1, x2, y1, y2) {\n    return Math.abs(x1 - x2) >= Math.abs(y1 - y2) ? (x1 - x2 > 0 ? 'Left' : 'Right') : (y1 - y2 > 0 ? 'Up' : 'Down');\n  }\n\n  function longTap() {\n    longTapTimeout = null;\n    if (touch.last) {\n      touch.el.trigger('longTap');\n      touch = {};\n    }\n  }\n\n  function cancelLongTap() {\n    if (longTapTimeout) clearTimeout(longTapTimeout);\n    longTapTimeout = null;\n  }\n\n  function cancelAll() {\n    if (touchTimeout)   clearTimeout(touchTimeout);\n    if (tapTimeout)     clearTimeout(tapTimeout);\n    if (swipeTimeout)   clearTimeout(swipeTimeout);\n    if (longTapTimeout) clearTimeout(longTapTimeout);\n    touchTimeout = tapTimeout = swipeTimeout = longTapTimeout = null;\n    touch = {};\n  }\n\n  function isPrimaryTouch(event){\n    return event.pointerType == event.MSPOINTER_TYPE_TOUCH && event.isPrimary;\n  }\n\n  $(function(){\n    var now, delta, deltaX = 0, deltaY = 0, firstTouch;\n\n    if ('MSGesture' in window) {\n      gesture = new MSGesture();\n      gesture.target = document.body;\n    }\n\n    $(document)\n      .on('MSGestureEnd gestureend', function(e){\n\n        var swipeDirectionFromVelocity = e.originalEvent.velocityX > 1 ? 'Right' : e.originalEvent.velocityX < -1 ? 'Left' : e.originalEvent.velocityY > 1 ? 'Down' : e.originalEvent.velocityY < -1 ? 'Up' : null;\n\n        if (swipeDirectionFromVelocity) {\n          touch.el.trigger('swipe');\n          touch.el.trigger('swipe'+ swipeDirectionFromVelocity);\n        }\n      })\n      // MSPointerDown: for IE10\n      // pointerdown: for IE11\n      .on('touchstart MSPointerDown pointerdown', function(e){\n\n        if(e.type == 'MSPointerDown' && !isPrimaryTouch(e.originalEvent)) return;\n\n        firstTouch = (e.type == 'MSPointerDown' || e.type == 'pointerdown') ? e : e.originalEvent.touches[0];\n\n        now      = Date.now();\n        delta    = now - (touch.last || now);\n        touch.el = $('tagName' in firstTouch.target ? firstTouch.target : firstTouch.target.parentNode);\n\n        if(touchTimeout) clearTimeout(touchTimeout);\n\n        touch.x1 = firstTouch.pageX;\n        touch.y1 = firstTouch.pageY;\n\n        if (delta > 0 && delta <= 250) touch.isDoubleTap = true;\n\n        touch.last = now;\n        longTapTimeout = setTimeout(longTap, longTapDelay);\n\n        // adds the current touch contact for IE gesture recognition\n        if (gesture && ( e.type == 'MSPointerDown' || e.type == 'pointerdown' || e.type == 'touchstart' ) ) {\n          gesture.addPointer(e.originalEvent.pointerId);\n        }\n\n      })\n      // MSPointerMove: for IE10\n      // pointermove: for IE11\n      .on('touchmove MSPointerMove pointermove', function(e){\n\n        if (e.type == 'MSPointerMove' && !isPrimaryTouch(e.originalEvent)) return;\n\n        firstTouch = (e.type == 'MSPointerMove' || e.type == 'pointermove') ? e : e.originalEvent.touches[0];\n\n        cancelLongTap();\n        touch.x2 = firstTouch.pageX;\n        touch.y2 = firstTouch.pageY;\n\n        deltaX += Math.abs(touch.x1 - touch.x2);\n        deltaY += Math.abs(touch.y1 - touch.y2);\n      })\n      // MSPointerUp: for IE10\n      // pointerup: for IE11\n      .on('touchend MSPointerUp pointerup', function(e){\n\n        if (e.type == 'MSPointerUp' && !isPrimaryTouch(e.originalEvent)) return;\n\n        cancelLongTap();\n\n        // swipe\n        if ((touch.x2 && Math.abs(touch.x1 - touch.x2) > 30) || (touch.y2 && Math.abs(touch.y1 - touch.y2) > 30)){\n\n          swipeTimeout = setTimeout(function() {\n            touch.el.trigger('swipe');\n            touch.el.trigger('swipe' + (swipeDirection(touch.x1, touch.x2, touch.y1, touch.y2)));\n            touch = {};\n          }, 0);\n\n        // normal tap\n        } else if ('last' in touch) {\n\n          // don't fire tap when delta position changed by more than 30 pixels,\n          // for instance when moving to a point and back to origin\n          if (isNaN(deltaX) || (deltaX < 30 && deltaY < 30)) {\n            // delay by one tick so we can cancel the 'tap' event if 'scroll' fires\n            // ('tap' fires before 'scroll')\n            tapTimeout = setTimeout(function() {\n\n              // trigger universal 'tap' with the option to cancelTouch()\n              // (cancelTouch cancels processing of single vs double taps for faster 'tap' response)\n              var event = $.Event('tap');\n              event.cancelTouch = cancelAll;\n              touch.el.trigger(event);\n\n              // trigger double tap immediately\n              if (touch.isDoubleTap) {\n                touch.el.trigger('doubleTap');\n                touch = {};\n              }\n\n              // trigger single tap after 250ms of inactivity\n              else {\n                touchTimeout = setTimeout(function(){\n                  touchTimeout = null;\n                  touch.el.trigger('singleTap');\n                  touch = {};\n                }, 250);\n              }\n            }, 0);\n          } else {\n            touch = {};\n          }\n          deltaX = deltaY = 0;\n        }\n      })\n      // when the browser window loses focus,\n      // for example when a modal dialog is shown,\n      // cancel all ongoing events\n      .on('touchcancel MSPointerCancel', cancelAll);\n\n    // scrolling the window indicates intention of the user\n    // to scroll, not tap or swipe, so cancel all ongoing events\n    $(window).on('scroll', cancelAll);\n  });\n\n  ['swipe', 'swipeLeft', 'swipeRight', 'swipeUp', 'swipeDown', 'doubleTap', 'tap', 'singleTap', 'longTap'].forEach(function(eventName){\n    $.fn[eventName] = function(callback){ return $(this).on(eventName, callback); };\n  });\n})(jQuery);\n"],"sourceRoot":"/source/"}